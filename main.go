package main

import (
	"fmt"
	"log"
	"net/http"
	"sync"

	"NokiaAssesmentGo/controller"
	"NokiaAssesmentGo/db"
	"NokiaAssesmentGo/utils"

	_ "NokiaAssesmentGo/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	httpSwagger "github.com/swaggo/http-swagger"
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /
func main() {
	fmt.Println("Hii")

	router := CreateRouter()
	router.HandleFunc("/getFromDBAndStoreInCache", controller.GetFromDBAndStoreInCache)
	router.Get("/readFromCache", controller.ReadFromCache)
	router.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("http://localhost/swagger/doc.json"), //The url pointing to API definition"
	))

	//Initiating cache
	utils.Initiate()
	//mongo clinet connect
	db.ConnectToDB()
	//Store data in cache
	db.GetPersonFromDB()

	serverPort := 80
	log.Println("Listening on port: ", serverPort)
	err1 := http.ListenAndServe(fmt.Sprint(":", serverPort), router)
	if err1 != nil {
		log.Println("Listening on port: ", err1.Error())
	}
}

// newRouter returns new router with preinstalled middleware
func newRouter() *chi.Mux {
	chi.RegisterMethod("COPY")
	chi.RegisterMethod("LOCK")
	chi.RegisterMethod("MKCOL")
	chi.RegisterMethod("MOVE")
	chi.RegisterMethod("PROPFIND")
	chi.RegisterMethod("PROPPATCH")
	chi.RegisterMethod("UNLOCK")
	router := chi.NewRouter()
	router.Use(
		middleware.RequestID,
		middleware.RealIP,
		middleware.NoCache,
	)
	return router
}

var routerInitOnce sync.Once
var router *chi.Mux

// CreateRouter returns map feature services route interface
func CreateRouter() *chi.Mux {
	routerInitOnce.Do(func() {
		router = newRouter()
	})
	return router
}
